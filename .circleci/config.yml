palantir_aliases:
  - &always-run
    filters:
      branches:
        only: /.*/
      tags:
        only: /.*/

version: 2
jobs:
  generate-bindings:
    docker:
      - image: cimg/openjdk:11.0.10-node
    steps:
      - checkout

      - run:
          name: Prepare integration tests
          command: ./scripts/prepare_integration_tests.sh

      - persist_to_workspace:
          root: '.'
          paths:
            - build/downloads
            - build/resources
            - test/generated

  py3:
    docker:
      - image: cimg/python:3.8.12
    steps:
      - checkout

      - attach_workspace:
          at: '.'

      - run:
          name: Install dependencies
          command: pip install --user setuptools tox==3.24.5 tox-virtualenv-no-download

      - restore_cache:
          key: tox-v2-py3-{{ checksum "tox.ini" }}-({ checksum "Pipfile.lock" })

      - run:
          name: Install tox things
          command: if [ ! -d ".tox" ]; then python -m tox -e py3 --notest; fi

      - save_cache:
          key: tox-v2-py3-{{ checksum "tox.ini" }}-({ checksum "Pipfile.lock" })
          paths:
            - .tox

      - run: python -m tox -e py3

      - run:
          name: Collect JUnit XML
          command: mkdir -p ~/junit && find . -type f -regex ".*/build/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

  mypy3:
    docker:
      - image: cimg/python:3.8.12
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: pip install --user setuptools tox==3.24.5 tox-virtualenv-no-download

      - restore_cache:
          key: tox-v2-mypy3-{{ checksum "tox.ini" }}-({ checksum "Pipfile.lock" })

      - run:
          name: Install tox things
          command: if [ ! -d ".tox" ]; then python -m tox -e mypy3 --notest; fi

      - save_cache:
          key: tox-v2-mypy3-{{ checksum "tox.ini" }}-({ checksum "Pipfile.lock" })
          paths:
            - .tox

      - run: python -m tox -e mypy3

      - run:
          name: Collect JUnit XML
          command: mkdir -p ~/junit && find . -type f -regex ".*/build/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

  lint:
    docker:
      - image: cimg/python:3.8.12
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: pip install --user setuptools tox==3.24.5 tox-virtualenv-no-download

      - restore_cache:
          key: tox-v2-lint-{{ checksum "tox.ini" }}-({ checksum "Pipfile.lock" })

      - run:
          name: Install tox things
          command: if [ ! -d ".tox" ]; then python -m tox -e lint --notest; fi

      - save_cache:
          key: tox-v2-lint-{{ checksum "tox.ini" }}-({ checksum "Pipfile.lock" })
          paths:
            - .tox

      - run: python -m tox -e lint

      - run:
          name: Collect JUnit XML
          command: mkdir -p ~/junit && find . -type f -regex ".*/build/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

  publish-wheel:
    docker:
      - image: cimg/python:3.8.12
    steps:
      - checkout
      - deploy:
          command: |
            pip install --user setuptools wheel twine
            python setup.py sdist bdist_wheel --universal
            ~/.local/bin/twine upload --repository-url https://upload.pypi.org/legacy/ -u $PYPI_USERNAME -p $PYPI_PASSWORD dist/*
  circle-all:
    docker:
    - image: busybox:1.34.1
    resource_class: small
    steps:
    - run:
        command: echo "All required jobs finished successfully"

workflows:
  version: 2
  build:
    jobs:
      - generate-bindings:
          <<: *always-run

      - py3:
          requires:
            - generate-bindings
          <<: *always-run
      - mypy3:
          <<: *always-run
      - lint:
          <<: *always-run
      - publish-wheel:
          requires:
            - circle-all
          filters:
            tags: { only: '/^[0-9]+(\.[0-9]+)+(-[a-zA-Z]+[0-9]*)*$/' }
            branches: { ignore: /.*/ }
      - circle-all:
          requires:
          - lint
          - mypy3
          - py3
          filters:
            tags:
              only: /.*/
